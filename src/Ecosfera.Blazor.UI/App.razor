@using Ecosfera.Blazor.UI.Services.Layout
@inject IStringLocalizer<SharedResource> L
@inject NavigationManager NavManager
@implements IDisposable
<Fluxor.Blazor.Web.StoreInitializer/>

<LoadingScreen IsLoaded="@_isLoaded" LayoutService="LayoutService">
    <div class="page-transition @_transitionClass">
        <CascadingAuthenticationState>
            <Router AppAssembly="@typeof(App).Assembly">
                <Found Context="routeData">
                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                        <Authorizing>
                            <text>@L["Please wait, we are authorizing you..."]</text>
                        </Authorizing>
                        <NotAuthorized>
                            @if (context.User.Identity?.IsAuthenticated ?? false)
                            {
                                <p>@L["You are not authorized to be here. For more information, contact your system administrator."]</p>
                            }
                            else
                            {
                                <Login/>
                            }
                        </NotAuthorized>
                    </AuthorizeRouteView>

                </Found>
                <NotFound>
                    <PageTitle>Not found</PageTitle>
                    <LayoutView Layout="@typeof(MainLayout)">
                        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="d-flex">
                            <p role="alert">
                                @L["Sorry, there's nothing at this address."] <MudButton Variant="Variant.Filled" Size="Size.Small" Link="/">@L["Go Home"]</MudButton>
                            </p>
                        </MudContainer>
                    </LayoutView>
                </NotFound>
            </Router>
        </CascadingAuthenticationState>
    </div>
</LoadingScreen>

@code{

    [Inject]
    private LayoutService LayoutService { get; set; } = null!;

    private string _transitionClass = string.Empty;
    private bool _isLoaded = true;

    protected override async Task OnInitializedAsync()
    {
        _transitionClass = Settings.EnableLoadingScreen ? "loadScreen-initial-hidden" : string.Empty;
        LayoutService.SetBaseTheme(Theme.Theme.ApplicationTheme());
        await LayoutService.ApplyUserPreferences(true);

        if (Settings.EnableLoadingTransitionScreen)
        {
            NavManager.LocationChanged += HandleLocationChanged;
        }
    }
    public void Dispose()
    {
        if (Settings.EnableLoadingTransitionScreen)
        {
            NavManager.LocationChanged -= HandleLocationChanged;
        }
        GC.SuppressFinalize(this);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Settings.EnableLoadingScreen)
            {
                _transitionClass = "";
                _isLoaded = false;
                StateHasChanged();
                await Task.Delay(Settings.LoadingScreenDuration >= 0 ? Settings.LoadingScreenDuration : 2000);
                _isLoaded = true;
                StateHasChanged();
            }
        }
    }

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (Settings.EnableLoadingTransitionScreen)
        {
            _transitionClass = "";
            _isLoaded = false;
            StateHasChanged();
            await Task.Delay(Settings.LoadingTransitionScreenDuration >= 0 ? Settings.LoadingTransitionScreenDuration : 600);
            _isLoaded = true;
            StateHasChanged();
        }
    }

}